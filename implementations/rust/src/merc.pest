file                   =  { SOI ~ entry+ ~ EOI }
alpha                  = _{ 'a'..'z' | 'A'..'Z' }
digit                  = _{ '0'..'9' }
unquoted_identifier    = @{ (ASCII_ALPHANUMERIC | "-" | "_")+  }
identifier             = _{ unquoted_identifier | string }
WHITESPACE             = _{ " " | "\t" | NEWLINE }
comment                =  @{ "#" ~ (!NEWLINE ~ ANY)* }
comments               =  { comment* }
entry                  =  { comments ~ accesses ~ "=" ~ value }
accesses               =  { (access)+ }
access                 =  _{ (object_access | map_access | array_access_implicit | array_access_explicit) }
array_access_implicit  =  { "[" ~ "+" ~ "]" }
array_access_explicit  =  { "[" ~ identifier ~ "]" }
object_access          =  { "." ~ identifier }
map_access             =  { "{" ~ identifier ~ "}" }
value                  = _{ null | boolean | number | string | enum }
boolean                =  { "true" | "false" }
null                   =  { "null" }
enum                   =  { "#" ~ identifier }

string                        = { multiline_able_raw_string | singleline_raw_string | multiline_able_escaped_string | singleline_escaped_string }
singleline_raw_string         = @{ "'" ~ (!("'" | NEWLINE) ~ ANY)* ~ "'" }
multiline_able_raw_string     = @{ "'''" ~ ((!"'''") ~ ANY)* ~ "'''" }
singleline_escaped_string     = ${ "\"" ~ singleline_escaped_string_inner ~ "\"" }
multiline_able_escaped_string = ${ "\"\"\"" ~ multiline_able_escaped_string_inner ~ "\"\"\"" }
singleline_escaped_string_inner  = @{ singleline_escaped_string_inner_char* }
singleline_escaped_string_inner_char  = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
multiline_able_escaped_string_inner  = @{ multiline_able_escaped_string_inner_char* }
multiline_able_escaped_string_inner_char  = {
    !("\"\"\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}


number = @{
    "-"? ~ ( "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ) ~ fraction? ~ exponent?
}

integer  = { "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
fraction = _{ "." ~ ASCII_DIGIT+ }
exponent = _{ ("e" | "E") ~ ("-" | "+")? ~ ASCII_DIGIT+ }

